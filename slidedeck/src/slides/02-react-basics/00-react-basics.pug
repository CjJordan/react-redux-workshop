section
  h1 React
  p
    a(href="http://facebook.github.io/react/index.html") website

section
  h3 A JavaScript library for building user interfaces

section
  h1 Virtual DOM

section
  ul
    li Replica of the Browser DOM
    li React redraws the entire screen on change
    li React calculates the minimum amount of changes required

section
  p
    a(href="http://facebook.github.io/react/docs/glossary.html") More info?

section
  p For a bare-bones React component, we need to do 2 things
  ul
    li Extend the react Component
    li Implement render()

section
  h2.lower Extend React Component

section
  ul
    li Defines a component class
    li A component implements a render method which returns a single child
    li That child may have an arbitrarily deep child structure

section
  pre.
    <code class="javascript" data-trim>
    import React, { Component } from 'react';
    class Hello extends Component {
      render() {...}
    }

    module.exports = Hello;
    </code>

section
  h2 Component Specifications

section
  h2.lower render()
  ul
    li Required
    li Returns a single child component that is either a virtual representation of a native DOM component or composite component

section
  h2.lower render()
  ul
    li You should return null (or false) to indicate that you don't want anything rendered
    li React renders a &lt;noscript&gt; tag to work with our current diffing algorithm
    li When returning null or false, React.findDOMNode(this) will return null

section
  h2.lower render()
  ul
    li Should be pure
    li Should not modify component state
    li Should return the same result each time it's invoked
    li Should not read from or write to the DOM
    li Work should be performed in componentDidMount() or the other lifecycle methods

section
  h2.lower constructor
  ul
    li Invoked at object creation
    li Receives "props"
    li This is a great place to setup your initial state

section
  pre.
    <code class="javascript" data-trim>
    constructor(props) {
      super(props);
      this.state = {
        saveText: 'Update',
        employee: {},
        errors: {}
      };
    }
    </code>

section
  h2.lower defaultProps
  ul
    li Values in the mapping will be set on this.props if that prop is not specified by the parent component
    li This invoked before any instances are created and therefore it can't rely on this.props

section
  pre.
    <code class="javascript" data-trim>
    class Foo extends React.Component {
        render() {
            return (&lt;div>{this.props.foo}&lt;/div>)
        }
    }
    Foo.defaultProps = {
        foo: ‘Foo’
    }
    </code>

section
  h2.lower propTypes: {}
  ul
    li The propTypes object allows you to validate props being passed to your components
    li Defined in a similar matter to defaultProps

section
  pre.
    <code class="javascript" data-trim>
    import PropTypes from ‘prop-types’
    ...
    Foo.propTypes: {
       max:        PropTypes.number.isRequired,
       maxVisible: PropTypes.number,
       onChange:   PropTypes.func.isRequired
    }

    </code>

section
  h1 JSX

section
  ul
    li JavaScript syntax extension that looks similar to XML
    li Compiles to actual JavaScript that you'll be able to see during labs

section
  pre.
    <code class="javascript" data-trim>
    render() {
      return (
        &lt;div className="ui message"&gt;
          &lt;div className="ui huge header"&gt;{this.state.greeting}&lt;/div&gt;
          &lt;div className="ui large header"&gt;{this.props.friend}&lt;/div&gt;
        &lt;/div&gt;
      );
    }

    </code>

section
  p React's JSX uses the upper vs. lower case convention to distinguish between local component classes and HTML tags
  ul
    li UpperCase = Component
    li lowercase = tag

section
  p Since JSX is a superset of JavaScript, identifiers like class and for as XML attribute names is discouraged
  ul
    li htmlFor = for
    li className = class

section
  h2 Data: State vs. Props

section
  ul
    li "props" are the data you pass into your component via attributes
    li Used for application data that you need to display or manage with your component

section
  ul
    li "state" is your component's internally scoped ... state
    li Used for the behavior of your component: open, disabled, submitted, etc.

section
  ul
    li One exception: "Controller" components
    li They will have a state that represents the application data
    li They pass their state as props to their children components

section
  pre.
    <code class="javascript" data-trim>
    render() {
      return (
        &lt;EmployeeForm employee={this.state.employee}
          errors={this.state.errors}
          validateAll={this.validateAll}
          hasErrors={this.hasErrors}
          saveText={this.state.saveText}
          onSave={this.saveEmployee}
          validate={this.validate}
          toggleAdmin={this.toggleAdmin} /&gt;
      );
    }

    </code>

section
  h2 Component Lifecycle
  ul
    li Mounting
    li Updating
    li Unmounting

section
  h2 Mounting
  p These methods are called when an instance of a component is being created and inserted into the DOM:
  ol
    li constructor()
    li componentWillMount()
    li render()
    li componentDidMount()

section
  h3.lower componentWillMount()
  ul
    li Invoked immediately before mounting occurs -- before render()
    li If you call setState within this method, render() will see the updated state
    li Since its before render, setState won't cause a "re-render"

section
  h3.lower render()

section
  h3.lower componentDidMount()
  ul
    li Invoked immediately after the initial rendering occurs
    li Setting state will cause "re-render"
    li Place to integrate with other JS frameworks
    li Place to Send AJAX requests

section
  h2 Updating:
  p An update can be caused by changes to props or state.
  ol
    li componentWillReceiveProps()
    li shouldComponentUpdate()
    li componentWillUpdate()
    li render()
    li componentDidUpdate()

section
  h4.lower componentWillReceiveProps(object nextProps)
  ul
    li Invoked when a component is receiving new props
    li This method is not called for the initial render

section
  h4.lower componentWillReceiveProps(object nextProps)
  ul
    li Used to react to a prop transition
    li This happens before render() is called when updating the state using this.setState()
    li The old props can be accessed via this.props
    li Calling this.setState() within this function will not trigger an additional render

section
  h4.lower shouldComponentUpdate(object nextProps, object nextState)
  ul
    li Invoked before rendering when new props or state are being received
    li This method is not called for the initial render or when forceUpdate is used

section
  h4.lower shouldComponentUpdate(object nextProps, object nextState)
  ul
    li Return false when you're certain that the transition to the new props and state will not require a component update
    li render() will be completely skipped until the next state change
    li componentWillUpdate() and componentDidUpdate() will not be called

section
  h4.lower componentWillUpdate(object nextProps, object nextState)
  ul
    li Invoked immediately before rendering when new props or state are being received
    li Not called for the initial render

section
  h4.lower componentWillUpdate(object nextProps, object nextState)
  ul
    li Cannot use this.setState() in this method
    li If you need to update state in response to a prop change, use componentWillReceiveProps instead

section
  h4.lower render()

section
  h4.lower componentDidUpdate(object prevProps, object prevState)
  ul
    li Invoked immediately after the component's updates are flushed to the DOM
    li Not called for the initial render
    li Setting state will cause "re-render"
    li Operate on the DOM when the component has been updated

section
  h2.lower Unmounting:
  h3.lower componentWillUnmount()
  ul
    li Invoked immediately before a component is unmounted from the DOM
    li Perform any necessary cleanup in this method
  ul
    li Invalidating timers
    li Cleaning up any DOM elements that were created in componentDidMount()

section
  h2.lower ReactTestUtils
  ul
    li Utilities to make it easy to test React components

section
  pre.
    <code class="javascript" data-trim>
    import ReactTestUtils from 'react-dom/test-utils';
    </code>

section
  h4.lower Simulate.{eventName}(element, [eventData])
  ul
    li Simulate an event dispatch on a DOM node with optional event data
    li Possibly the single most useful utility in ReactTestUtils
    li Has a method for every event that React understands

section
  pre.
    <code class="javascript" data-trim>
    // &lt;button ref="button">...&lt;/button>
    const node = this.refs.button;
    ReactTestUtils.Simulate.click(node);
    </code>

section
  h4.lower renderIntoDocument(ReactComponent instance)
  ul
    li Render a component into a detached DOM node in the document

section
  pre.
    <code class="javascript" data-trim>
    element = ReactTestUtils.renderIntoDocument(
      &lt;EmployeeForm employee={employee}
        errors={errors}
        validate={spies.validate}
        hasErrors={spies.hasErrors}
        toggleAdmin={spies.toggleAdmin}
        onSave={spies.onSave} /&gt;
    );

    </code>

section
  h2 Expectation Helpers

section
  h4.lower isElement(ReactElement element)
  ul
    li Returns true if the element is any ReactElement

section
  h4.lower isElementOfType(ReactElement element, function componentClass)
  ul
    li Returns true if the element is a ReactElement that has a type of a React componentClass

section
  h4.lower isDOMComponent(ReactComponent instance)
  ul
    li Returns true if the instance is a DOM component (such as a &lt;div&gt; or &lt;span&gt;)

section
  h4.lower isCompositeComponent(ReactComponent instance)
  ul
    li Returns true if the instance is a composite component (created with React.createClass())

section
  pre.
    <code class="javascript" data-trim>
    it('should instantiate the EmployeeForm', function () {
      expect(ReactTestUtils.isCompositeComponent(element)).toBe(true);
    });

    </code>

section
  h4.lower isCompositeComponentWithType(ReactComponent instance, function componentClass)
  ul
    li Returns true if the instance is a composite component (created with React.createClass()) whose type is of a React componentClass

section
  h2 DOM Query Methods

section
  h4.lower scryRenderedDOMComponentsWithClass(ReactComponent tree, string className)
  ul
    li Finds all instances of components in the rendered tree that are DOM components and whose class matches className

section
  h4.lower findRenderedDOMComponentWithClass(ReactComponent tree, string className)
  ul
    li Like scryRenderedDOMComponentsWithClass() but expects there to be one result
    li Throws an exception if there is more than one match or no match at all

section
  pre.
    <code class="javascript" data-trim>
    var cancel = ReactTestUtils.findRenderedComponentWithClass(
      element,
      'cancel-btn'
    );

    </code>

section
  h4.lower scryRenderedComponentsWithType(ReactComponent tree, function componentClass)
  ul
    li Finds all instances of components with type equal to componentClass

section
  h4.lower findRenderedComponentWithType(ReactComponent tree, function componentClass)
  ul
    li Same as scryRenderedComponentsWithType() but expects there to be exactly one result
    li Throws an exception if there is more than one match or no match at all

section
  pre.
    <code class="javascript" data-trim>
    var cancel = ReactTestUtils.findRenderedComponentWithType(
      element,
      CancelButton
    );

    </code>

section
  h4.lower scryRenderedDOMComponentsWithTag(ReactComponent tree, string tagName)
  ul
    li Finds all instances of components in the rendered tree that are DOM components and whose tag name matches tagName

section
  h4.lower findRenderedDOMComponentWithTag(ReactComponent tree, string tagName)
  ul
    li Like scryRenderedDOMComponentsWithTag() but expects there to be exactly one result
    li Throws an exception if there is more than one match or no match at all

section
  pre.
    <code class="javascript" data-trim>
    var button = ReactTestUtils.findRenderedDOMComponentWithTag(
      cancel,
      'button'
    );

    </code>

section
  h1 Lab 02
  h2 Your First React Component
