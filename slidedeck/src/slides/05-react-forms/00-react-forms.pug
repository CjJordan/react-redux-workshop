section
  h1 React Forms

section
  ul
    li React Form Inputs hold internal state from user interactions
  pre.
    <code class="html" data-trim>
    &lt;form>
      &lt;label>
        Name:
        &lt;input type="text" name="name" />
      &lt;/label>
      &lt;input type="submit" value="Submit" />
    &lt;/form>

    </code>

section
  ul
    li Form components allow listening for changes
    li Set a callback to the onChange prop
    li The callback fires when:
      ul
        li The value changes (every keystroke)
        li Checked state changes (checkbox)
        li Selected state changes (select dropdown)

section
  h2 Controlled Components
  ul
    li React controls state and display
    li Any &lt;input&gt; with value set is a controlled component
    li Value of the rendered element will always reflect the value prop
  pre.
    <code class="javascript" data-trim>handleCityChange(event) {
      this.setState({city: {value: event.target.value}});
    }

    &lt;input type="text" value={this.state.city.value}
           onChange={this.handleCityChange} />
    </code>

section
  h2 React Bootstrap
  ul
    li Bootstrap Form components for React
  pre.
    <code class="javascript" data-trim>&lt;FormGroup controlId="firstName">
      &lt;ControlLabel>First Name&lt;/ControlLabel>
      &lt;FormControl
        type="text"
        value={this.state.firstName.value}
        placeholder="Enter firstName"
        onChange={(e) => this.handleFirstNameChange(e.target.value)}
      />
    &lt;/FormGroup>
    </code>

section
  h2 React Bootstrap Validation
  ul
    li Add a validationState function to return one of success, warning, or error
    li Add `&lt;FormControl.Feedback />` inside the FormGroup tag

section
  h3 Validation
  pre.
    <code class="javascript" data-trim>&lt;FormGroup
      controlId="firstName"
      validationState={this.getFirstNameValidationState()}
    >
      &lt;ControlLabel>First Name&lt;/ControlLabel>
      &lt;FormControl
        type="text"
        value={this.state.firstName.value}
        placeholder="Enter firstName"
        onChange={(e) => this.handleFirstNameChange(e.target.value)}
      />
      &lt;FormControl.Feedback />
    &lt;/FormGroup>
    </code>

section
  pre.
    <code class="javascript" data-trim>getFirstNameValidationState() {
      if (!this.state) return;
      if (this.state.firstName.valid === true) return 'success';
      else if (this.state.firstName.valid === false) return 'error';
    }

    handleFirstNameChange(value) {
      const isValid = value ? true : false;
      return this.setState(
        { firstName: {value: value, valid: isValid }}
      );
    }
    </code>

section
  h2 Uncontrolled Components
  ul
    li React does not control the state
    li Used for custom behavior
    li Good for co-existing with non-react libraries
    li Use a `ref` function to get input value from DOM
  pre.
    <code class="html" data-trim>&lt;input type="text" ref={(input) => this.textInput = input} />
    </code>

section
  h1 Lab 5
  h2 React Form Validation
